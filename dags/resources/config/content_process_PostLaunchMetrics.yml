#================================================================================================
# Importing common configuration
#================================================================================================

CommonConf: !include common/snowflake_common_config.yml

#================================================================================================
# Configuration Job pipeline
#================================================================================================

dags:
  sagemaker:
    domain: "max"
    sub_domain: "job_process"
    action: "PostLaunchMetrics"
    default_args:
      owner: "mei-cheng.shih@warnermedia.com"
      depends_on_past: True
      start_date: "2021-03-29"
      email_prod: "mei-cheng.shih@warnermedia.com"
      email_nonprod: "mei-cheng.shih@warnermedia.com"
      email_on_failure: True
      email_on_retry: True
      retries: 1
      domain: "content"
      retry_delay: 15
    schedule_interval: "@daily"
    max_active_runs: 1
    catchup: False
    schema: "WORKSPACE"
    model_name: "post_launch_metrics"
    glue_model_name: "post_launch_metrics"    
    slack_channel:
      NON-PROD: "hbomax-cds-alerts"
      PROD: "hbomax-cds-alerts"
    tasks:

      - name: "python_script_post_launch_subscriber"
        type: "BashOperator"
        script_loc: "common"
        script_name: "post_launch_subscriber"
        param_file_name: "post_launch_subscriber"
      
      # update the matrics second
      - name: "python_script_post_launch_metrics"
        type: "BashOperator"
        script_loc: "common"
        script_name: "post_launch_metrics"
        param_file_name: "post_launch_metrics"
        upstream_task_name: "python_script_post_launch_subscriber"
      
      # update the trailer first
      - name: "python_script_post_launch_trailer_metrics"
        type: "BashOperator"
        script_loc: "common"
        script_name: "post_launch_trailer_metrics"
        param_file_name: "post_launch_trailer_metrics"
        upstream_task_name: "python_script_post_launch_metrics"
      
      # prelaunch features
      - name: "prelaunch_trailer_feature_to_staging"
        templates_dict:
          stage: "{{ var.value.DS_CONTENT_HBO_INGEST_DATASCIENCE_CONTENT }}"
          database: "{{ var.value.DS_SF_MAX_DATABASE }}"
          schema: "{{ var.value.DS_SF_MAX_SCHEMA }}"
        sql_file_names:
          - "feature_extraction_pre_launch_trailer.sql"
        upstream_task_name: "python_script_post_launch_trailer_metrics"
        downstream_task_name: ecr_container_creation
      
      # postlaunch features (some used in prelaunch)
      - name: "trailer_feature_to_staging"
        templates_dict:
          stage: "{{ var.value.DS_CONTENT_HBO_INGEST_DATASCIENCE_CONTENT }}"
          database: "{{ var.value.DS_SF_MAX_DATABASE }}"
          schema: "{{ var.value.DS_SF_MAX_SCHEMA }}"
        sql_file_names:
          - "feature_extraction_trailer.sql"
        upstream_task_name: "python_script_post_launch_trailer_metrics"
        downstream_task_name: ecr_container_creation

      - name: "funnel_metric_feature_to_staging"
        templates_dict:
          stage: "{{ var.value.DS_CONTENT_HBO_INGEST_DATASCIENCE_CONTENT }}"
          database: "{{ var.value.DS_SF_MAX_DATABASE }}"
          schema: "{{ var.value.DS_SF_MAX_SCHEMA }}"
        sql_file_names:
          - "feature_extraction_funnel_metric.sql"
        upstream_task_name: "python_script_post_launch_trailer_metrics"
        downstream_task_name: ecr_container_creation

      - name: "metadata_feature_to_staging"
        templates_dict:
          stage: "{{ var.value.DS_CONTENT_HBO_INGEST_DATASCIENCE_CONTENT }}"
          database: "{{ var.value.DS_SF_MAX_DATABASE }}"
          schema: "{{ var.value.DS_SF_MAX_SCHEMA }}"
        sql_file_names:
          - "feature_extraction_metadata.sql"
        upstream_task_name: "python_script_post_launch_trailer_metrics"
        downstream_task_name: ecr_container_creation

      - name: "media_cost_pre_launch_feature_to_staging"
        templates_dict:
          stage: "{{ var.value.DS_CONTENT_HBO_INGEST_DATASCIENCE_CONTENT }}"
          database: "{{ var.value.DS_SF_MAX_DATABASE }}"
          schema: "{{ var.value.DS_SF_MAX_SCHEMA }}"
        sql_file_names:
          - "feature_extraction_media_cost_pre_launch.sql"
        upstream_task_name: "python_script_post_launch_trailer_metrics"
        downstream_task_name: ecr_container_creation

      - name: "media_cost_post_launch_feature_to_staging"
        templates_dict:
          stage: "{{ var.value.DS_CONTENT_HBO_INGEST_DATASCIENCE_CONTENT }}"
          database: "{{ var.value.DS_SF_MAX_DATABASE }}"
          schema: "{{ var.value.DS_SF_MAX_SCHEMA }}"
        sql_file_names:
          - "feature_extraction_media_cost_post_launch.sql"
        upstream_task_name: "python_script_post_launch_trailer_metrics"
        downstream_task_name: ecr_container_creation

      - name: "sub_total_feature_to_staging"
        templates_dict:
          stage: "{{ var.value.DS_CONTENT_HBO_INGEST_DATASCIENCE_CONTENT }}"
          database: "{{ var.value.DS_SF_MAX_DATABASE }}"
          schema: "{{ var.value.DS_SF_MAX_SCHEMA }}"
        sql_file_names:
          - "feature_extraction_total_sub_num.sql"
        upstream_task_name: "python_script_post_launch_trailer_metrics"
        downstream_task_name: ecr_container_creation

      - name: "content_cost_to_staging"
        templates_dict:
          stage: "{{ var.value.DS_CONTENT_HBO_INGEST_DATASCIENCE_CONTENT }}"
          database: "{{ var.value.DS_SF_MAX_DATABASE }}"
          schema: "{{ var.value.DS_SF_MAX_SCHEMA }}"
        sql_file_names:
          - "feature_extraction_content_cost.sql"
        upstream_task_name: "python_script_post_launch_trailer_metrics"
        downstream_task_name: ecr_container_creation

      - name: "vtp_feature_to_staging"
        templates_dict:
          stage: "{{ var.value.DS_CONTENT_HBO_INGEST_DATASCIENCE_CONTENT }}"
          database: "{{ var.value.DS_SF_MAX_DATABASE }}"
          schema: "{{ var.value.DS_SF_MAX_SCHEMA }}"
        sql_file_names:
          - "feature_extraction_vtp.sql"
        upstream_task_name: "python_script_post_launch_trailer_metrics"
        downstream_task_name: ecr_container_creation

      - name: "ecr_container_creation"
        type: "BashOperator"
        kernel: "python3"

      - name: "sagemaker_notebook_job_processing_script"
        type: "BashOperator"
        notebook_name: "PrePostLaunch_28d"
        Details:
          instance_type: "ml.m5.2xlarge"
          instance_count: 1
        BucketIOConfig:
          DEV:
            model_bucket: "hbo-ingest-datascience-content-dev"
          BETA:
            model_bucket: "hbo-ingest-datascience-content-beta"
          PROD:
            model_bucket: "hbo-ingest-datascience-content"
        upstream_task_name: "ecr_container_creation"

      - name: "write_prediction_output_to_snowflake"
        upstream_task_name: "sagemaker_notebook_job_processing_script"
        templates_dict:
          stage: "{{ var.value.DS_CONTENT_HBO_OUTBOUND_DATASCIENCE_CONTENT }}"
          database: "{{ var.value.DS_SF_MAX_DATABASE }}"
          schema: "{{ var.value.DS_SF_MAX_SCHEMA }}"
        sql_file_names:
            - "output_to_S3.sql" 

      - name: "send_notification_cds"
        type: "EmailOperator"
        to: "mei-cheng.shih@warnermedia.com"
        subject: "sagemaker-airflow: EMAIL TASK test"
        html: "Hi Team,<br><h3>Test email from sagemaker-airflow DAG task.</h3><br>Regards,<br> DAP"
        upstream_task_name : "write_prediction_output_to_snowflake"
